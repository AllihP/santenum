name: Django CI/CD Pipeline

# Déclenche le workflow sur les push et les pull requests vers la branche 'main'.
# Adaptez 'main' si votre branche principale est 'master'.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest # Exécute le job sur une machine virtuelle Ubuntu fraîche

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Récupère le code de votre dépôt

      - name: Set up Docker Buildx
        # Recommandé pour des builds Docker plus rapides et multi-plateformes.
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        # Remplace 'docker-compose build' par 'docker compose build' (Docker Compose V2).
        # Construit les images Docker définies dans votre docker-compose.yml.
        run: docker compose build

      - name: Prepare .env for testing
        # Crée un fichier .env temporaire pour les variables d'environnement nécessaires aux tests.
        # Ces variables ne sont PAS exposées dans les logs.
        run: |
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DJANGO_DEBUG=True" >> .env
          echo "DATABASE_URL=sqlite:///db.sqlite3" >> .env # Force SQLite pour les tests unitaires/intégration rapides
          # Si vos tests nécessitent des variables spécifiques à la DB MySQL temporaire, ajoutez-les ici:
          # echo "DJANGO_DB_NAME=santenumerique_test_db" >> .env
          # echo "DJANGO_DB_USER=${{ secrets.DB_TEST_USER }}" >> .env
          # echo "DJANGO_DB_PASSWORD=${{ secrets.DB_TEST_PASSWORD }}" >> .env
          # echo "DJANGO_DB_HOST=mysql_db" >> .env
          # echo "DJANGO_DB_PORT=3306" >> .env
        env:
          # Assurez-vous que ces secrets sont définis dans GitHub (Settings -> Secrets and variables -> Actions).
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          # DB_TEST_USER: ${{ secrets.DB_TEST_USER }} # Exemple de secret pour utilisateur DB de test
          # DB_TEST_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }} # Exemple de secret pour mot de passe DB de test

      - name: Start Docker Compose services for testing
        # Démarre les services de base de données, web et nginx en arrière-plan.
        # Utilise 'docker compose' (V2).
        run: docker compose up -d mysql_db web nginx

      - name: Wait for MySQL to be ready
        # Script pour attendre que MySQL soit entièrement démarré et accepte les connexions.
        # Plus robuste qu'un simple 'sleep'.
        run: |
          for i in $(seq 1 30); do # Tente jusqu'à 30 fois (max 90 secondes)
            docker compose exec mysql_db mysqladmin ping -h localhost -uroot -pAmmi/123@ >/dev/null 2>&1 && break
            echo "Waiting for MySQL... ($i/30)"
            sleep 3
          done
          if [ $i -eq 30 ]; then
            echo "MySQL did not start in time."
            exit 1
          fi

      - name: Run Django migrations on test database
        # Applique les migrations Django dans le conteneur web de test.
        run: docker compose exec web python manage.py migrate --noinput

      - name: Collect static files for testing (optional, if tests need them)
        # Collecte les fichiers statiques dans le conteneur web de test.
        run: docker compose exec web python manage.py collectstatic --noinput

      - name: Run Django Tests
        # Exécute la suite de tests Django.
        # Si vous avez des tests spécifiques à la DB MySQL temporaire, assurez-vous que votre
        # settings.py bascule sur cette configuration DB quand DEBUG=True (ou DATABASE_URL n'est pas défini).
        run: docker compose exec web python manage.py test

      - name: Clean up test containers
        # S'assure que les conteneurs sont arrêtés et supprimés, même si les tests échouent.
        # Très important pour libérer les ressources.
        if: always()
        run: docker compose down -v

      - name: Log in to Docker Hub (or other container registry)
        # Nécessaire pour pousser l'image Docker après un build et test réussis.
        # N'exécute que sur les push à la branche principale.
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Votre nom d'utilisateur Docker Hub
          password: ${{ secrets.DOCKER_PASSWORD }} # Votre jeton d'accès ou mot de passe Docker Hub

      - name: Push Docker images
        # Pousse l'image 'web' (votre application Django) vers Docker Hub.
        # Le tag 'latest' est mis à jour, et un tag avec le SHA du commit est créé pour le versionnement.
        if: github.ref == 'refs/heads/main'
        run: |
          WEB_IMAGE_NAME="votre_username_dockerhub/santenumerique_web" # Adaptez à votre nom d'utilisateur et nom d'image
          docker tag santenumerique_web:latest "$WEB_IMAGE_NAME:latest"
          docker tag santenumerique_web:latest "$WEB_IMAGE_NAME:${{ github.sha }}"
          docker push "$WEB_IMAGE_NAME:latest"
          docker push "$WEB_IMAGE_NAME:${{ github.sha }}"
          # Si vous avez une image Nginx personnalisée à pousser, ajoutez des lignes similaires ici.

      - name: Set up Poetry
        run: pip install poetry==2.1.3

      - name: Cache Poetry dependencies
        id: cache-poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies with Poetry
        # Add the 'working-directory' option here
        working-directory: ./santenumerique # Assuming 'santenumerique' is your actual project root relative to the repo root
        run: poetry install --no-root


  deploy:
    needs: build_and_test # Ce job ne s'exécute que si 'build_and_test' réussit
    runs-on: ubuntu-latest
    environment:
      name: production # Environnement GitHub pour la gestion des secrets spécifiques à la production
    if: github.ref == 'refs/heads/main' # Déploye uniquement lorsque la branche principale est mise à jour

    steps:
      - name: Deploy to production server via SSH
        # Utilise l'action SSH pour se connecter au serveur de production.
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }} # Adresse IP ou nom de domaine du serveur de production
          username: ${{ secrets.SSH_USERNAME }} # Nom d'utilisateur SSH
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Clé privée SSH (doit être un secret GitHub)
          script: |
            echo "Navigating to project directory..."
            cd /path/to/your/santenumerique/project # REMPLACEZ PAR LE CHEMIN RÉEL DE VOTRE PROJET SUR LE SERVEUR

            echo "Pulling latest Docker images..."
            # Tire la dernière image depuis Docker Hub (ou votre registre).
            # Assurez-vous que le nom d'image est correct ici.
            docker compose pull web
            # Si Nginx est une image personnalisée poussée: docker compose pull nginx

            echo "Bringing up new containers and removing old ones..."
            # Met à jour les services avec les nouvelles images et supprime les conteneurs obsolètes.
            docker compose up -d --remove-orphans

            echo "Running Django migrations on production..."
            docker compose exec web python manage.py migrate --noinput

            echo "Collecting static files on production..."
            docker compose exec web python manage.py collectstatic --noinput

            echo "Restarting web service to apply changes..."
            docker compose restart web

            echo "Deployment completed!"
